{
	// Place your calculator-service workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"proto import": {
		"prefix": "proto-import",
		"body": [
		  "import \"google/api/annotations.proto\";"
		],
		"description": "proto import"
	  },
	  "proto annotation": {
		"prefix": "proto-annotation",
		"body": [
		  "option (google.api.http) = {",
		  "    post: \"/api/v1/calculator/sum\"",
		  "    body: \"*\"",
		  "    response_body: \"*\"",
		  "};"
		],
		"description": "proto annotation"
	  },
	  "server port": {
		"prefix": "server-port",
		"body": [
		  "var (",
		  "	gRPCPort = \":8080\"",
		  ")"
		],
		"description": "server port"
	  },
	  "server implementation": {
		"prefix": "server-implementation",
		"body": [
		  "type calculatorService struct{}",
		  "",
		  "func (c calculatorService) Sum(ctx context.Context, req *calculatorpb.SumRequest) (*calculatorpb.SumResponse, error) {",
		  "	number1 := req.GetNumber_1()",
		  "	number2 := req.GetNumber_2()",
		  "	log.Printf(\"Calculating sum of %d and %d\", number1, number2)",
		  "	sum := number1 + number2",
		  "	response := calculatorpb.SumResponse{",
		  "		Sum: sum,",
		  "	}",
		  "	return &response, nil",
		  "}",
		  ""
		],
		"description": "server implementation"
	  },
	  "server start": {
		"prefix": "server-start",
		"body": [
		  "listener, _ := net.Listen(\"tcp\", gRPCPort)",
		  "gRPCServer := grpc.NewServer()",
		  "",
		  "var server calculatorService",
		  "calculatorpb.RegisterCalculatorServiceServer(gRPCServer, server)",
		  "",
		  "gRPCServer.Serve(listener)",
		  "defer gRPCServer.GracefulStop()"
		],
		"description": "server start"
	  },
	  "service import": {
		"prefix": "service-import",
		"body": [
		  "calculatorpb \"calculator-service/calculatorpb\""
		],
		"description": "service import"
	  },
	  "client connection": {
		"prefix": "client-connection",
		"body": [
		  "conn, err := grpc.Dial(gRPCPort, grpc.WithInsecure())",
		  "if err != nil {",
		  "	log.Fatalf(\"Failed to connect to gRPC server: %v\", err)",
		  "}",
		  "defer conn.Close()",
		  "client := calculatorpb.NewCalculatorServiceClient(conn)",
		  "",
		  "ctx, cancel := context.WithTimeout(context.Background(), time.Second)",
		  "defer cancel()"
		],
		"description": "client connection"
	  },
	  "client call": {
		"prefix": "client-call",
		"body": [
		  "sumRequest := calculatorpb.SumRequest{",
		  "	Number_1: 5,",
		  "	Number_2: 7,",
		  "}",
		  "r, err := client.Sum(ctx, &sumRequest)",
		  "if err != nil {",
		  "	log.Fatalf(\"could not calculate sum: %v\", err)",
		  "}",
		  "log.Printf(\"Sum of numbers 5 and 7 is : %d\", r.GetSum())"
		],
		"description": "client call"
	  },
	  "proxy ports": {
		"prefix": "proxy-ports",
		"body": [
		  "var (",
		  "	gRPCPort = \":$1\"",
		  "	httpPort = \":$2\"",
		  ")"
		],
		"description": "proxy start"
	  },
	  "proxy start": {
		"prefix": "proxy-start",
		"body": [
		  "ctx, cancel := context.WithCancel(context.Background())",
		  "defer cancel()",
		  "",
		  "mux := runtime.NewServeMux()",
		  "opts := []grpc.DialOption{grpc.WithInsecure()}",
		  "calculatorpb.RegisterCalculatorServiceHandlerFromEndpoint(ctx, mux, gRPCPort, opts)",
		  "http.ListenAndServe(httpPort, mux)"
		],
		"description": "proxy start"
	  },
	  "sum call": {
		"prefix": "sum-call",
		"body": [
		  "###",
		  "POST http://0.0.0.0:8081/api/v1/calculator/sum",
		  "Content-Type: application/json",
		  "",
		  "{",
		  "  \"number1\": 5,",
		  "  \"number2\": 7",
		  "}",
		  "",
		  "###",
		  ""
		],
		"description": "sum call"
	  }
}